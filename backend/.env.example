# import { pool } from "../config/connectDB";
# import multer from "multer";
# import path from "path";
# const storage = multer.diskStorage({
#   destination: (req, file, cb) => {
#     cb(null, "uploads/");
#   },
#   filename: (req, file, cb) => {
#     const ext = path.extname(file.originalname);
#     const filename = path.basename(file.originalname, ext);
#     cb(null, `${filename}-${Date.now()}${ext}`);
#   },
# });

# const upload = multer({ storage: storage });

# const getAllUsers = async (req, res) => {
#   try {
#     const [users] = await pool.query("SELECT * FROM users");
#     res.status(200).json({
#       errCode: 0,
#       message: "OK",
#       data: users,
#     });
#   } catch (error) {
#     res.status(500).json({
#       message: error.message,
#     });
#   }
# };

# const loginUsers = async (req, res) => {
#   const { email, password } = req.body;
#   try {
#     const [users] = await pool.query(
#       "SELECT * FROM users WHERE email = ? AND password = ?",
#       [email, password]
#     );
#     if (users.length > 0) {
#       res.status(200).json({
#         errCode: 0,
#         message: "OK",
#         data: users,
#       });
#     } else {
#       res.status(200).json({
#         errCode: 1,
#         message: "Email or password is incorrect",
#         data: {},
#       });
#     }
#   } catch (error) {
#     res.status(500).json({
#       message: error.message,
#     });
#   }
# };

# const registerUsers = async (req, res) => {
#   const { email, password, name } = req.body;
#   try {
#     const [users] = await pool.query("SELECT * FROM users WHERE email = ?", [
#       email,
#     ]);
#     if (users.length > 0) {
#       res.status(200).json({
#         errCode: 1,
#         message: "Email is already in use",
#         data: {},
#       });
#     } else {
#       await pool.query(
#         "INSERT INTO users (email, password, name) VALUES (?, ?, ?)",
#         [email, password, name]
#       );
#       res.status(200).json({
#         errCode: 0,
#         message: "OK",
#         data: {},
#       });
#     }
#   } catch (error) {
#     res.status(500).json({
#       message: error.message,
#     });
#   }
# };

# const uploadFile = async (req, res) => {
#   upload.single("file")(req, res, function (error) {
#     if (error) {
#       res.status(500).json({
#         message: error.message,
#       });
#     } else {
#       res.status(200).json({
#         errCode: 0,
#         message: "OK",
#         data: {
#           file: req.file,
#         },
#       });
#     }
#   });
# };
# const updateUser = async (req, res) => {
#   const { email, password, name, image } = req.body;

#   console.log(req.body);

#   try {
#     await pool.query(
#       "UPDATE users SET password = ?, name = ?, image = ? WHERE email = ?",
#       [password, name, image, email]
#     );

#     res.status(200).json({
#       errCode: 0,
#       message: "User updated successfully",
#       data: {
#         email,
#         password,
#         name,
#         image,
#       },
#     });
#   } catch (error) {
#     res.status(500).json({
#       message: error.message,
#     });
#   }
# };
# const deleteUser = async (req, res) => {
#   const { email } = req.body;
#   try {
#     await pool.query("DELETE FROM users WHERE email = ?", [email]);
#     res.status(200).json({
#       errCode: 0,
#       message: "User deleted successfully",
#       data: {
#         email,
#       },
#     });
#   } catch (error) {
#     res.status(500).json({
#       message: error.message,
#     });
#   }
# };
# export default {
#   getAllUsers,
#   loginUsers,
#   registerUsers,
#   uploadFile,
#   deleteUser,
#   updateUser,
# };

# import express from "express";
# import userController from "../controllers/userController";
# let router = express.Router();

# let initWebRoutes = (app) => {
#   router.get("/get-all-users", userController.getAllUsers);
#   router.post("/login", userController.loginUsers);
#   router.post("/register", userController.registerUsers);
#   router.post("/upload-file", userController.uploadFile);
#   router.put("/update-user", userController.updateUser);
#   router.delete("/delete-user", userController.deleteUser);
#   return app.use("/", router);
# };

# module.exports = initWebRoutes;


# import mysql from "mysql2/promise";

# const pool = mysql.createPool({
#   host: "localhost",
#   user: "root",
#   password: "sapassword",
#   database: "test",
#   port: 3307,
# });

# const connectDB = async () => {
#   try {
#     await pool.getConnection();
#     console.log("Connect to database successfully!");
#   } catch (error) {
#     console.log("Error connecting to database: ", error);
#   }
# };

# export { connectDB, pool };


# import express from "express";
# import cors from "cors";
# import initWebRoutes from "./routes/web";
# import { connectDB } from "./config/connectDB";
# const path = require("path");
# require("dotenv").config();

# const app = express();

# const corsOptions = {
#   origin: process.env.URL_REACTNATIVE || "http://localhost:8081",
#   methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
#   allowedHeaders: ["Content-Type", "Authorization"],
#   credentials: true,
# };
# app.use("/uploads", express.static(path.join(__dirname, "../uploads")));

# app.use(cors(corsOptions));

# app.use(express.json());
# app.use(express.urlencoded({ extended: true }));

# connectDB();
# initWebRoutes(app);
# const port = process.env.PORT || 3000;

# app.listen(port, () => {
#   console.log(`Example app listening on port ${port}`);
# });



# NOSQL


# import mongoose from "mongoose";

# const UserSchema = new mongoose.Schema({
#   name: { type: String, required: true },
#   email: { type: String, required: true, unique: true },
#   password: { type: String, required: true },
# });

# const User = mongoose.model("User", UserSchema);

# export default User;


# const connectDB = async () => {
#   try {
#     const uri = "mongodb://sa:sapassword@localhost:27017/test?authSource=admin";
#     await mongoose.connect(uri);
#     console.log("Connected to MongoDB successfully!");
#   } catch (error) {
#     console.error("Error connecting to MongoDB:", error);
#     process.exit(1);
#   }
# };

# export { connectDB };



# import User from "../model/User";

# const getAllUsers = async (req, res) => {
#   try {
#     const users = await User.find();
#     res.status(200).json({
#       errCode: 0,
#       message: "OK",
#       data: users,
#     });
#   } catch (error) {
#     res.status(500).json({
#       message: error.message,
#     });
#   }
# };
# export default {
#   getAllUsers,
# };
